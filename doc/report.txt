For this assignment I had considered three separate pathfinding algorithms; A*, IDA*, and D* Lite. Both IDA* and D* Lite are extensions of the basic A* algorithm with different goals in mind to A* and to each other so I wanted to pick the algorithm that would work best for the specific task of calculating a path from node 1 to 61.

IDA* (Iterative Deepening A*) is a variant of iterative deepning depth-first search and as such it requires only an amount of memory linear in the length of the path solution, whereas standard A* keeps track of all unexplored and explored nodes, requiring exponential memory. It's important to note, however, that this nature of IDA* means it will often explore the same nodes in the graph, many times, and as such its performance could be significantly worse than A* for large graphs. For this reason, I chose not to use IDA* over A* for this problem.

My other consideration, D* Lite (Dynamic A* Lite) is an incremental heuristic search algorithm based on A* and is designed with dynamicity of graphs in mind. The algorithm behaves like A* except the minimum cost flow can change as the algorithm runs. In addition to open and closed sets, additiona new/raise/lower sets are kept to eliminate the need to backtrack far through the graph, making the algorithm more efficient than A* for environmental changes during pathfinding. However, for static graphs the algorithm adds nothing except additional memory usage, so ultimately I chose to use standard A* as my algorithm.

After implementing A*, I had three choices of heuristic function; manhattan distance, square distance, and distance. I implemented all three of these as I wanted to investigate which of them found the best solution with the best efficiency. My results are as follows.

------------------
Manhattan Distance
------------------
Path:       1 -> 8 -> 17 -> 27 -> 31 -> 29 -> 32 -> 38 -> 36 -> 42 -> 56 -> 61
Total Cost: 866
---------------
Square Distance
---------------
Path:       1 -> 9 -> 18 -> 24 -> 21 -> 28 -> 38 -> 36 -> 42 -> 56 -> 61
Total Cost: 898
--------
Distance
--------
Path:       1 -> 8 -> 17 -> 20 -> 24 -> 21 -> 28 -> 38 -> 36 -> 42 -> 56 -> 61
Total Cost: 835

I found it noteworthy that using manhattan distance as the heuristic resulted in a better path than the square distance heuristic but I expect this to be related to the specific shape of this graph. As expected, the regular distance heuristic resulted in the best path. Something of note is that both the manhattan distance and regular distance heuristics require an extra node to be traversed in comparison with the square distance heuristic. For this specific problem however, the goal was to minimize travel cost, so this does not affect the findings.

In conclusion, I found that the A* pathfinding algorithm using distance as its heuristic function results in minimal travel cost for high efficiency.

N.B.

I made a number of optimizations to my implementation of A*. The first of these was to duplicate the open set data in an open min heap, allowing me to retrieve the next lowest-code open node in constant time. To eliminate the impact this had on memory, the implementation now creates shared_ptrs of nodes and stores these in the open/closed sets as well as in the returned path, rather than copying/duplicating the node data potentially multiple times.
